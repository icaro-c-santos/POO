package DAOs;


import java.util.List;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import entidades.Professor;


public class Dao_Professor {
	

	
	public Long saveProfessor(Professor professor){
		
		BD.bdProfessors.add(professor);
		return professor.getCodigo();
		/*
		 * EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		 * EntityManager em = emf.createEntityManager(); em.getTransaction().begin();
		 * em.persist(professor); em.getTransaction().commit(); em.close(); return
		 * professor.getCodigo();
		 */
	
	}
	
	public boolean updateProfessor(Professor professorParameter){
		
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		Professor professor = em.find(Professor.class, professorParameter.getCodigo());
		if(professor==null) { return false;}
		 em.merge(professor);
		 professor.setNome(professorParameter.getNome());
		 professor.setNascimento(professorParameter.getNascimento());
		 professor.setCpf(professorParameter.getCpf());
	     em.getTransaction().commit();
	     em.close();
	     return true;
	
}
	
	public List<Professor> getAll(){
		
		return BD.bdProfessors;
		/*
		 * EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		 * EntityManager em = emf.createEntityManager(); TypedQuery<Professor> query =
		 * em.createQuery("select u from Professor u WHERE status = 1",Professor.class);
		 * List<Professor> list = query.getResultList(); return list;
		 */
	}

	@SuppressWarnings("unchecked")
	public List<Professor> getProfessorNome(String nome){
		
		return BD.bdProfessors.stream().filter(p -> p.getNome().equals(nome)).collect(Collectors.toList());

		/*
		 * EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		 * EntityManager em = emf.createEntityManager(); List<Professor> list = em.
		 * createQuery("SELECT c FROM Professor c WHERE c.nome LIKE :Cnome AND status = 1"
		 * ).setParameter("Cnome", "%"+nome+"%").getResultList(); return list;
		 */
	}
	
	@SuppressWarnings("unchecked")
	public List<Professor> getProfessorCpf(String cpf){
		
		return BD.bdProfessors.stream().filter(p -> p.getCpf().equals(cpf)).collect(Collectors.toList());

		/*
		 * EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		 * EntityManager em = emf.createEntityManager(); List<Professor> list = em.
		 * createQuery("SELECT c FROM Professor c WHERE c.cpf LIKE :Cparamet AND status = 1"
		 * ).setParameter("Cparamet", cpf).getResultList(); return list;
		 */
	}
	
	public Professor getProfessorMatricula(Long codigo){
		
		return BD.bdProfessors.stream().filter(p -> p.getCodigo()== codigo).collect(Collectors.toList()).get(0); 
	
		
		/*
		 * if(codigo== null) { return null;} EntityManagerFactory emf =
		 * Persistence.createEntityManagerFactory("escola"); EntityManager em =
		 * emf.createEntityManager(); return em.find(Professor.class, codigo);
		 */
	}

	public boolean deleteProfessor(Long codigo) {
		
		
		return BD.bdProfessors.removeIf(P -> P.getCodigo() == codigo);
		/*
		 * EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		 * EntityManager em = emf.createEntityManager(); em.getTransaction().begin();
		 * Professor professor = em.find(Professor.class,codigo);
		 * 
		 * em.remove(professor);
		 * 
		 * 
		 * //if(professor==null) { return false;} //em.merge(professor);
		 * //professor.setStatus(false); em.getTransaction().commit(); em.close();
		 * 
		 * return true;
		 */
	}
	
}


