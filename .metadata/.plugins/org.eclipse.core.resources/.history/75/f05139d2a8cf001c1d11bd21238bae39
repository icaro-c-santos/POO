package DAOs;

import java.util.List;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import entidades.Aluno;

public class Dao_Aluno {
	
	public Long saveAluno(Aluno aluno){
		
		BD.bdAluno.add(aluno);
		return aluno.getMatricula();
	}
	
	public boolean updateAluno(Aluno alunoParameter){
		
		alunoParameter.getMatricula();
		BD.bdAluno.stream().filter(a -> a.getMatricula()==alunoParameter.getMatricula()).
		collect(Collectors.toList()).forEach(p ->{
		p.setCpf(alunoParameter.getCpf());
		p.setEmail(alunoParameter.getEmail());
		p.setNascimento(alunoParameter.getNascimento());
		p.setNome(alunoParameter.getNome());
		});
	    return true;
	
}
	
	public List<Aluno> getAll(){
	return BD.bdAluno;
	}

	@SuppressWarnings("unchecked")
	public List<Aluno> getAlunoNome(String nome){

    BD.bdAluno.stream().filter(p -> p.getNome().equalsIgnoreCase(nome)).
    collect(Collectors.toList());

	}
	
	@SuppressWarnings("unchecked")
	public List<Aluno> getAlunoCpf(String cpf){
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		EntityManager em = emf.createEntityManager();
		List<Aluno> list = em.createQuery("SELECT c FROM Aluno c WHERE c.cpf LIKE :Cparamet").setParameter("Cparamet", cpf).getResultList();
	    return list;
	}
	
	public Aluno getAlunoMatricula(Long matricula){
		if(matricula== null) { return null;}
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		EntityManager em = emf.createEntityManager();
	    return em.find(Aluno.class, matricula);
	}

	public boolean deleteAluno(Long matricula) {
		
		if(matricula == null){return false;}
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("escola");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		Aluno alunoExcluir = em.find(Aluno.class,matricula);
		if(alunoExcluir != null) {
		    em.remove(alunoExcluir);
		    em.getTransaction().commit();
		    em.close();
		    return true;
		}
		em.getTransaction().commit();
	    em.close();
		return false;
	}
	
}



